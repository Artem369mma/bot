import logging
from aiogram import Bot, Dispatcher, executor, types
from config import API_TOKEN, number, QIWI_SEC_TOKEN, sum, admin
import keyboard as k
import functions as fc
import text as tx
import sqlite3
from qiwipyapi import Wallet


# –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


connection = sqlite3.connect('data.db')
q = connection.cursor()


wallet_p2p = Wallet(number, p2p_sec_key=QIWI_SEC_TOKEN)


@dp.message_handler(commands=['start', 'help']) # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
async def start(message: types.Message):
	q.execute(f"SELECT * FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchall()
	if len(result) == 0:
			q.execute(f"INSERT INTO users (user_id, balance)"
						f"VALUES ('{message.chat.id}', '0')")
			connection.commit()
			await message.answer(tx.sogl, parse_mode='Markdown', reply_markup=k.accept)
	else:
		await message.answer(
		f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.mention}, –∫–ª–∏–∫–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! –ó–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 10 –∫–æ–ø–µ–µ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å.',
		reply_markup=k.greet_kb)



@dp.message_handler(content_types=["text"]) # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç
async def reaction(message: types.Message):
	chat_id = message.chat.id
	fc.first(chat_id=chat_id)
	if message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
		re = q.execute(f'SELECT * FROM users').fetchall()
		kol = len(re)
		await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞:\n\nüïú –†–∞–±–æ—Ç–∞–µ–º –¥–Ω–µ–π: <b>1</b>\nüë® –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{0}</b>\nüíµ –í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: <b>0‚ÇΩ</b>".format(kol), parse_mode="HTML")
	if message.text == 'üë§ –ë–∞–ª–∞–Ω—Å':
		bal = q.execute(f'SELECT balance FROM users WHERE user_id = "{message.chat.id}"').fetchone()
		connection.commit()
		await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {fc.toFixed(bal[0], 1)}‚ÇΩ')
	elif message.text == 'üí∏ –ö–ª–∏–∫':
		q.execute(f'UPDATE users SET balance = balance + 0.1 WHERE user_id IS "{message.chat.id}"')
		connection.commit()

		await message.answer('–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +0.1‚ÇΩ')
	elif message.text == 'üé∞ –í—ã–≤–æ–¥':
		payed = q.execute(f'SELECT payd FROM users WHERE user_id = "{message.chat.id}"').fetchone()
		connection.commit()
		if payed[0] == 0:
			await message.answer(tx.ver ,reply_markup=k.pay)
		else:
			bal = q.execute(f'SELECT balance FROM users WHERE user_id = "{message.chat.id}"').fetchone()
			connection.commit()
			await message.answer(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è.', reply_markup=k.greet_kb)
			await bot.send_message(admin, f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:\nID - {message.chat.id}\n–Æ–∑–µ—Ä–Ω–µ–π–º - {message.from_user.mention}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]({message.from_user.url})\n–ë–∞–ª–∞–Ω—Å - {fc.toFixed(bal[0], 1)}\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –¥–µ–Ω—å–≥–∏.', parse_mode='Markdown')
			q.execute(f"UPDATE USERS SET payd = 0 WHERE user_id = {chat_id}")
			connection.commit()
	elif message.text == '–û–ø–ª–∞—Ç–∏—Ç—å':
		link = fc.pay(chat_id=chat_id)
		await message.answer(f'–í–∞—à ID - {message.chat.id}\n–ö –æ–ø–ª–∞—Ç–µ - {sum}‚ÇΩ\n[–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã]({link})', reply_markup=k.buy1, parse_mode='Markdown')
	elif message.text == '/admin':
		if str(chat_id) == str(admin):
			await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:', reply_markup=k.apanel)
		else:
			await message.answer('–ß–µ—Ä—Ç! –¢—ã –º–µ–Ω—è –≤–∑–ª–æ–º–∞–ªüôÉ')

@dp.callback_query_handler(lambda call: True) # Inline —á–∞—Å—Ç—å
async def cal(call):
	chat_id = call.message.chat.id
	if call.data == 'check':
		try:
			re = q.execute(f"SELECT bd FROM users WHERE user_id = {chat_id}").fetchone()
			status = wallet_p2p.invoice_status(bill_id=re[0])
			a = status['status']['value']
			if a == 'WAITING':
				await call.message.answer('–û—à–∏–±–∫–∞! –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=k.buy1)
			elif a == 'PAID':
				await call.message.answer('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å.', reply_markup=k.greet_kb)
				q.execute(f'UPDATE users SET payd = 1 WHERE user_id IS "{chat_id}"')
				q.execute(f'UPDATE users SET bd = 0 WHERE user_id IS "{chat_id}"')
				connection.commit()
			elif a == 'EXPIRED':
				await call.message.answer('–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω', reply_markup=k.buy1)
			elif a == 'REJECTED':
				await call.message.answer('–°—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω', reply_markup=k.buy1)
			elif a == 'UNPAID':
				await call.message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω', reply_markup=k.buy1)
		except Exception as err:
			await call.message.answer('–û—à–∏–±–∫–∞!')
	elif call.data == 'stats':
		re = q.execute(f'SELECT * FROM users').fetchall()
		kol = len(re)
		bal = q.execute(f"SELECT sum(balance) FROM users").fetchone()
		connection.commit()
		await call.message.answer(f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {kol}\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {fc.toFixed(bal[0], 1)}‚ÇΩ')
	elif call.data == 'back':
		await call.message.answer('–ù–∞–∑–∞–¥..', reply_markup=k.greet_kb)
	elif call.data == 'accept':
		await call.message.answer(
		f'–ü—Ä–∏–≤–µ—Ç, {call.from_user.mention}, –∫–ª–∏–∫–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! –ó–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 10 –∫–æ–ø–µ–µ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å.',
		reply_markup=k.greet_kb)



if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True) # –ó–∞–ø—É—Å–∫
